[
  {
    "Project_ID": "1",
    "Project_Title": "Mirrored Orbit",

    "Project_IconPath": "",
    "Project_Pitch": "Testing",

    "Project_Availability": [
      {
        "Platform": "Android",
        "Link": "https://example.com/android"
      }
    ],

    "Project_Role": "Sole Developer",
    "Project_TeamSize": "1",

    "Project_DevelopmentTime": "TBD",
    "Project_Status": "In Development",
    
    "Project_Engine": "Unity",

    "Project_ProjectContext": "TBD",

    "Project_PrototypeContext": "I developed this Black Hole Twin Control prototype in Unity as a fast-paced survival game where the player controls two mirrored balls under constant gravitational pull. Designed for modularity and scalability, it features a central black hole with spherical gravity, side-specific homing missiles, and mirrored drag-and-release controls.<br><br>Built with a focus on rapid prototyping and efficient time management, the project demonstrates my ability to prioritize core gameplay, deliver a minimum viable product quickly, and structure systems to support future expansion.<br><br>Working on this prototype highlighted the value of modular, reusable systems and inspired me to develop multiple <b>sub-projects</b> focused on super-class scripts. This approach led to the creation of flexible, scalable, and extensible systems, including my <b>GravityManipulator</b> script.",
    "Project_PrototypeVideoPath": "https://youtu.be/ZOdLqh4aWlg",

    "Project_SuperClass": "I developed this <b>Gravity Manipulator</b> script in Unity to simulate both directional and spherical gravity across 2D and 3D environments. Designed for <b>reusability</b> and <b>flexibility</b>, it automatically configures colliders and supports dynamic gravitational fields with features like <b>falloff intensity</b>, <b>bidirectional pull</b>, and <b>rotational alignment</b>.<br><br>Built with extensibility in mind, it integrates seamlessly with gravity-aware components and is optimized for performance using <b>interval-based scanning</b> or <b>trigger-based detection</b>.",
    "Project_CodeLink": "https://github.com/Dev-PeterT/Game-Dev-Tool-Kits/tree/main/Game%20Mechanics/Gravity%20Manipulator",
    "Project_CodePath": "https://raw.githubusercontent.com/Dev-PeterT/Game-Dev-Tool-Kits/ed30a7adfc94ce996fb2a6be1abc29d02150078b/Game%20Mechanics/Gravity%20Manipulator/GravityManipulator.cs",

    "Project_FinalContext": "TBD",
    "Project_FinalVideoPath": "",

    "Project_RecapContext": "TBD"
  }
]